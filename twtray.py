#!/usr/bin/env python
# encoding: utf-8
'''
fastentry -- The main loader for the quick entry GUI box.

fastentry is a description

It defines classes_and_methods

@author:     Liam Brown

@copyright:  2013 organization_name. All rights reserved.

This file is part of GTDHub.

    GTDHub is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    GTDHub is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GTDHub.  If not, see <http://www.gnu.org/licenses/>

@license:    GPL v3

@contact:    liams.toaster@gmail.com
@deffield    updated: Feb 2013
'''

import gtk, sys, os, pyxhook
from Controller import core
from View import GUI
from Model import Notes

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2013-02-10'
__updated__ = '2013-02-10'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

keys_list = {"Control":False, "Super":False, "n":False}
gui = None

def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2013 Liam Brown                                           \
                Licensed under the GNU GPL v3 (http://www.gnu.org/licenses/gpl-3.0.html)"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-i", "--in", dest="infile", help="set input path [default: %default]", metavar="FILE")
        parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(outfile="./out.txt", infile="./in.txt")

        # process options
        (opts, args) = parser.parse_args(argv)

        if opts.verbose > 0:
            print("verbosity level = %d" % opts.verbose)
        if opts.infile:
            print("infile = %s" % opts.infile)
        if opts.outfile:
            print("outfile = %s" % opts.outfile)

        # MAIN BODY #

    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2

def keyDown(key_event):
    press = key_event.Key
    if press.startswith("Control"):
        keys_list["Control"] = True
    elif press.startswith("Super"):
        keys_list["Super"] = True
    elif press == "n":
        keys_list["n"] = True

def keyUp(key_event):
    all_keys_down = True
    for j in keys_list:
        if not keys_list[j]:
            all_keys_down = False
    if all_keys_down:
        gui.show()
    press = key_event.Key
    if press.startswith("Control"):
        keys_list["Control"] = False
    elif press.startswith("Super"):
        keys_list["Super"] = False
    elif press == "n":
        keys_list["n"] = False


if __name__ == "__main__":
    gtk.gdk.threads_init()
    pm = pyxhook.HookManager()
    pm.HookKeyboard()
    pm.start()
    controller = core.DataHub()
    gui = GUI.Main()
    pm.KeyDown = keyDown
    pm.KeyUp=keyUp
    controller.addView(gui)
    gui.gui_activate()
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'fastentry_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())
